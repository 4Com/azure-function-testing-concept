{
	"info": {
		"_postman_id": "b8a91fe8-09a2-4a4c-bb14-c1f140418093",
		"name": "Azure Function Testing Concept",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "v1/person",
			"item": [
				{
					"name": "Get Person does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", \"Barb\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/v1/person?name={{name}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"person"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}",
									"description": "(Required) The **Name** of the person to GET"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Person does exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var personName = pm.environment.get(\"name\");\r",
									"\r",
									"pm.test(\"Status code is OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body should be populated\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(personName);\r",
									"    pm.expect(jsonData.id).to.be.greaterThan(0);\r",
									"    pm.expect(jsonData.phoneNumber).to.be.string;\r",
									"    pm.expect(jsonData.address).to.be.string;\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", \"John\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/v1/person?name={{name}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"person"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}",
									"description": "(Required) The **Name** of the person to GET"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Person creates",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", \"Barb\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var personName = pm.environment.get(\"name\");\r",
									"\r",
									"pm.test(\"Status code is Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(personName);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 42,\n    \"name\": \"{{name}}\",\n    \"phoneNumber\": \"Unknown\",\n    \"address\": \"The Upside Down\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v1/person",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"person"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Person conflict",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"name\", \"John\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var personName = pm.environment.get(\"name\");\r",
									"\r",
									"pm.test(\"Status code is Conflict\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(personName);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 41,\n    \"name\": \"{{name}}\",\n    \"phoneNumber\": \"888-519-1991\",\n    \"address\": \"19828 Valerio St, Winnetka, CA 91306, USA\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/v1/person",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"v1",
								"person"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:7071/api"
		},
		{
			"key": "name",
			"value": "John"
		}
	]
}